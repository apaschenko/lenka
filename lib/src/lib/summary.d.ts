import { LSummary, LNode, RawOptions, LCombineOptions, LFinalCloneOptions, LFinalCombineOptions } from './ifaces';
import { OperationType } from './general_types';
export declare class Summary implements LSummary {
    constructor(rawData: unknown[], operation: OperationType, rawOptions?: RawOptions);
    addToAllNodes(node: LNode): void;
    addToNodesToLabels(node: LNode): void;
    hasValue(rawData: unknown): boolean;
    buildResult(): any;
    getAndIncreaceLabel(): number;
    setByLabel(label: number, rawData: unknown): void;
    deleteByLabel(label: number): void;
    createTargetInstance(node: LNode): void;
    get accumulator(): import("./general_types").LAccumulatorType;
    get result(): any;
    get selectedRoot(): LNode;
    selectRootByIndex(index: number): LNode;
    get rawCloneOptions(): Partial<LFinalCloneOptions>;
    get rawCombineOptions(): LCombineOptions;
    get finalCloneOptions(): LFinalCloneOptions;
    get finalCombineOptions(): LFinalCombineOptions;
    get roots(): LNode[];
    private constructInstance;
    private validateAndBuildOptions;
    private initRoots;
    private getNodeByLabel;
    private _operation;
    private _label;
    private _valuesToLabels;
    private _allNodes;
    private _roots;
    private _selectedRoot;
    private _rawOptions;
    private _finalOptions;
}
